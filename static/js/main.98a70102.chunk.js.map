{"version":3,"sources":["ChatRoom.js","serviceWorker.js","index.js"],"names":["ChatRoom","state","text","content","onChangeText","e","_this","setState","target","value","submit","preventDefault","_this$state","id","Date","now","concat","Object","toConsumableArray","_this$state2","this","react_default","a","createElement","onSubmit","type","onChange","map","item","key","Component","Boolean","window","location","hostname","match","render","src_ChatRoom","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qKA8CeA,6MA3CXC,MAAQ,CACJC,KAAM,GACNC,QAAS,MAGbC,aAAe,SAACC,GACZC,EAAKC,SAAS,CACVL,KAAMG,EAAEG,OAAOC,WAIvBC,OAAS,SAACL,GACNA,EAAEM,iBADU,IAAAC,EAEcN,EAAKL,MAAvBC,EAFIU,EAEJV,KAAMC,EAFFS,EAEET,QACdG,EAAKC,SAAS,CACVL,KAAM,GACNC,QAAO,CAAG,CAACU,GAAIC,KAAKC,MAAOb,SAApBc,OAAAC,OAAAC,EAAA,EAAAD,CAA8Bd,+EAIpC,IAAAgB,EACqBC,KAAKnB,MAAvBC,EADHiB,EACGjB,KAAMC,EADTgB,EACShB,QAEd,OACIkB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMC,SAAUJ,KAAKV,QACjBW,EAAAC,EAAAC,cAAA,SACIE,KAAK,OACLhB,MAAOP,EACPwB,SAAUN,KAAKhB,eAEnBiB,EAAAC,EAAAC,cAAA,UAAQE,KAAK,UAAb,WAEJJ,EAAAC,EAAAC,cAAA,UACKpB,EAAQwB,IAAI,SAACC,GAAD,OACTP,EAAAC,EAAAC,cAAA,MAAIM,IAAKD,EAAKf,IAAKe,EAAK1B,iBApCzB4B,aCUHC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,iBAAOf,EAAAC,EAAAC,cAACc,EAAD,MAAcC,SAASC,eAAe,SD4HvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.98a70102.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass ChatRoom extends Component {\n    state = {\n        text: '',\n        content: [],\n    }\n\n    onChangeText = (e) => {\n        this.setState({\n            text: e.target.value,\n        })\n    }\n\n    submit = (e) => {\n        e.preventDefault();\n        const { text, content } = this.state;\n        this.setState({\n            text: '',\n            content: [{id: Date.now(), text}, ...content],\n        })\n    }\n\n    render() {\n        const { text, content } = this.state;\n\n        return (\n            <div>\n                <form onSubmit={this.submit}>\n                    <input\n                        type=\"text\"\n                        value={text}\n                        onChange={this.onChangeText}\n                    />\n                    <button type=\"submit\">submit</button>\n                </form>\n                <ul>\n                    {content.map((item) => (\n                        <li key={item.id}>{item.text}</li>\n                    ))}\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default ChatRoom;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport {render} from 'react-dom';\nimport ChatRoom from './ChatRoom';\nimport * as serviceWorker from './serviceWorker';\n\nrender(<ChatRoom />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}